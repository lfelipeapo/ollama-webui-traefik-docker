version: "3.8"

services:
  # Servi√ßo de inicializa√ß√£o para configurar permiss√µes adequadas
  init-volumes:
    image: busybox
    container_name: init-volumes
    user: "0:0"
    volumes:
      - ./letsencrypt:/data/letsencrypt
      - ./certbot-data:/data/certbot-data
    command: >
      sh -c "
        mkdir -p /data/letsencrypt /data/certbot-data &&
        chmod -R 755 /data/letsencrypt /data/certbot-data &&
        echo 'Diret√≥rios inicializados com permiss√µes corretas'
      "
    restart: "no"

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - init-volumes
      - ollama
      - open-webui
    volumes:
      - ./nginx/nginx.template:/etc/nginx/nginx.template:ro
      - ./letsencrypt:/etc/letsencrypt
      - ./certbot-data:/var/www/certbot
    command: /bin/sh -c "envsubst '$$DOMAIN' < /etc/nginx/nginx.template > /etc/nginx/nginx.conf && nginx -g 'daemon off;'"
    environment:
      - DOMAIN=${DOMAIN}
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 10s
      timeout: 5s
      retries: 3

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./letsencrypt:/etc/letsencrypt
      - ./certbot-data:/var/www/certbot
    depends_on:
      - init-volumes
      - nginx
    entrypoint: ["/bin/sh", "-c"]
    command: |
      echo "‚è≥ Aguardando NGINX iniciar..."
      sleep 15
      echo "üîê Solicitando certificado SSL para ${DOMAIN}..."
      certbot certonly --webroot -w /var/www/certbot --email lfelipeapo@hotmail.com --agree-tos --no-eff-email --keep-until-expiring -d ${DOMAIN} --non-interactive
      chmod -R 755 /etc/letsencrypt
      echo "‚úÖ Certificado gerado! Tentando reiniciar NGINX..."
      # Usa o Docker API para reiniciar o Nginx sem precisar de acesso direto
      wget -q --spider --tries=1 http://nginx/
      echo "‚úÖ Nginx pronto para usar os certificados!"

  ollama:
    image: ollama/ollama
    container_name: ollama
    restart: unless-stopped
    environment:
      - OLLAMA_HOST=0.0.0.0
    volumes:
      - ./ollama-data:/root/.ollama
    ports:
      - "11434:11434"
    depends_on:
      - init-volumes
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:11434/api/tags || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  ollama-model-loader:
    image: docker:latest
    container_name: ollama-model-loader
    depends_on:
      - ollama
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        echo "‚è≥ Aguardando Ollama iniciar completamente..."
        # Loop aprimorado para verificar se o Ollama est√° pronto
        for i in {1..30}; do
          if docker exec ollama curl -s http://localhost:11434/api/tags >/dev/null 2>&1; then
            break
          fi
          echo "Tentativa $$i: Ollama ainda n√£o est√° pronto. Aguardando..."
          sleep 10
        done
        
        echo "üì• Baixando modelos dentro do container Ollama..."
        for model in "gemma:2b" "deepseek-r1:1.5b" "qwen2.5-coder:1.5b" "codegemma:2b" "phi4-mini" "phi4" "llama3.3" "qwen2.5:14b" "qwen2.5-coder:14b"; do
          echo "Baixando $$model..."
          docker exec ollama ollama pull $$model
        done
        echo "‚úÖ Modelos baixados com sucesso!"
    restart: "no"

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: open-webui
    restart: unless-stopped
    depends_on:
      - ollama
      - init-volumes
    environment:
      - OLLAMA_BASE_URLS=http://ollama:11434
      - ENV=dev
      - WEBUI_AUTH=False
      - WEBUI_SECRET_KEY=t0p-s3cr3t
    ports:
      - "8080:8080"
    volumes:
      - ./webui-data:/app/data

networks:
  default:
    name: ollama-network
